name: 'Dependency review'
on:
  pull_request:
    

# If using a dependency submission action in this workflow this permission will need to be set to:
#
# permissions:
#   contents: write
#
# https://docs.github.com/en/enterprise-cloud@latest/code-security/supply-chain-security/understanding-your-software-supply-chain/using-the-dependency-submission-api
permissions:
  contents: read
  # Write permissions for pull-requests are required for using the `comment-summary-in-pr` option, comment out if you aren't using this option
  pull-requests: write

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4
        # Commonly enabled options, see https://github.com/actions/dependency-review-action#configuration-options for all available options.
        with:
          comment-summary-in-pr: always
        #   fail-on-severity: moderate
        #   deny-licenses: GPL-1.0-or-later, LGPL-2.0-or-later
        #   retry-on-snapshot-warnings: true
name: CodeQL

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    - cron: '0 0 * * 0' # weekly

jobs:
  analyze:
    name: CodeQL Analyze All
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [javascript, python, cpp, csharp, java]  # Add/remove based on your repo
        build-mode: [manual]  # cpp/java/csharp require build, rest do not

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - if: matrix.build-mode == 'manual'
        name: Naive Build Step (only for compiled langs)
        run: |
          echo "Starting naive build attempt..."
          for file in $(find . -name '*.c' -o -name '*.cpp' -o -name '*.cs' -o -name '*.java'); do
            echo "Compiling $file"
            gcc -c "$file" -o "/tmp/$(basename "$file").o" 2>/dev/null || \
            g++ -c "$file" -o "/tmp/$(basename "$file").o" 2>/dev/null || \
            echo "Skipping: $file (build failed)"
          done
          echo "Build loop complete."
      - name: Export CodeQL SARIF results to CSV
        if: always()
        run: |
          echo "Parsing CodeQL results for ${{ matrix.language }}..."

          SARIF_FILE=$(find . -name 'results.sarif' | head -n 1)
          if [ -z "$SARIF_FILE" ]; then
            echo "No SARIF file found for language ${{ matrix.language }}"
            exit 0
          fi

          jq -r '
            ["Rule ID", "Message", "File", "Start Line"],
            (.runs[].results[] | [
              .ruleId,
              .message.text,
              .locations[0].physicalLocation.artifactLocation.uri,
              .locations[0].physicalLocation.region.startLine
            ]) | @csv
          ' "$SARIF_FILE" > "codeql-vulns-${{ matrix.language }}.csv"

          echo "CSV for ${{ matrix.language }} vulnerabilities written to codeql-vulns-${{ matrix.language }}.csv"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
